name: Server 1 frontend deployment

on:
  push:
    branches:
      - staging
    paths:
      - 'triggers/staging.txt'

jobs:
  create-deployment-artifacts:
    name: Create deployment artifacts
    runs-on: ubuntu-latest
    outputs:
      DEPLOYMENT_MATRIX: ${{ steps.export-deployment-matrix.outputs.DEPLOYMENT_MATRIX }}

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - uses: actions/checkout@v4
        with:
          ref: staging

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          # cache-dependency-path: '**/package.json'
          # cache: 'pnpm'

      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --force

      # - name: Update environment variables
      #   run: |
      #     export NEXT_PUBLIC_NODE_ENV=production

      - uses: actions/cache@v3
        name: Setup .next cache
        with:
          path: ${{ github.workspace }}/.next/cache
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Build
        run: |
          export NEXT_PUBLIC_NODE_ENV=production
          pnpm build

      - name: Create deployment artifact
        env:
          GITHUB_SHA: ${{ github.sha }}
        run: tar -czf "${GITHUB_SHA}".tar.gz package.json next.config.js blackList.json whiteList.json ecosystem.config.js .next public

      - name: Store artifact for distribution
        uses: actions/upload-artifact@v3
        with:
          name: app-build
          path: ${{ github.sha }}.tar.gz

      - name: Export deployment matrix
        id: export-deployment-matrix
        run: |
          delimiter="$(openssl rand -hex 8)"
          JSON="$(cat ./.github/workflows/servers.json)"
          echo "DEPLOYMENT_MATRIX<<${delimiter}" >> "${GITHUB_OUTPUT}"
          echo "$JSON" >> "${GITHUB_OUTPUT}"
          echo "${delimiter}" >> "${GITHUB_OUTPUT}"

  prepare-release-on-servers:
    name: '${{ matrix.server.name }}: Prepare release'
    runs-on: ubuntu-latest
    needs: create-deployment-artifacts
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}

    steps:
      - uses: actions/download-artifact@v3
        with:
          name: app-build
      - name: Upload
        uses: appleboy/scp-action@master
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          source: ${{ github.sha }}.tar.gz
          target: ${{ matrix.server.path }}/artifacts

      - name: Extract archive and create directories
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA
          script: |
            mkdir -p "${{ matrix.server.path }}/releases/${GITHUB_SHA}"
            tar xzf ${{ matrix.server.path }}/artifacts/${GITHUB_SHA}.tar.gz -C "${{ matrix.server.path }}/releases/${GITHUB_SHA}"

  # run-before-hooks:
  #   name: '${{ matrix.server.name }}: Before hook'
  #   runs-on: ubuntu-latest
  #   needs: [create-deployment-artifacts, prepare-release-on-servers]
  #   strategy:
  #     matrix:
  #       server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
  #   steps:
  #     - name: Run before hooks
  #       uses: appleboy/ssh-action@master
  #       env:
  #         GITHUB_SHA: ${{ github.sha }}
  #         RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
  #         ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
  #         BASE_PATH: ${{ matrix.server.path }}
  #       with:
  #         host: ${{ matrix.server.ip }}
  #         username: ${{ matrix.server.username }}
  #         key: ${{ secrets.SSH_KEY }}
  #         port: ${{ matrix.server.port }}
  #         envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH
  #         script: |
  #           ${{ matrix.server.beforeHooks }}

  activate-release:
    name: '${{ matrix.server.name }}: Activate release'
    runs-on: ubuntu-latest
    needs: [
        create-deployment-artifacts,
        prepare-release-on-servers,
        # run-before-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Activate release
        uses: appleboy/ssh-action@master
        env:
          GITHUB_SHA: ${{ github.sha }}
          RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
          ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
          BASE_PATH: ${{ matrix.server.path }}
          # LOCAL_ENV: ${{ secrets.LOCAL_ENV }}
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH,ENV_PATH
          script: |
            set -e  # Exit on any command failure
            # printf "%s" "$LOCAL_ENV" > "${BASE_PATH}/.env"
            # ln -s -f ${BASE_PATH}/.env $RELEASE_PATH
            cd $RELEASE_PATH
            pnpm install --force
            ln -s -n -f $RELEASE_PATH $ACTIVE_RELEASE_PATH
            pm2 reload frontend 
            cd ~ 
            set +e  # Disable exit on command failure

  # run-after-hooks:
  #   name: '${{ matrix.server.name }}: After hook'
  #   runs-on: ubuntu-latest
  #   needs:
  #     [
  #       create-deployment-artifacts,
  #       prepare-release-on-servers,
  #       run-before-hooks,
  #       activate-release,
  #     ]
  #   strategy:
  #     matrix:
  #       server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
  #   steps:
  #     - name: Run after hooks
  #       uses: appleboy/ssh-action@master
  #       env:
  #         GITHUB_SHA: ${{ github.sha }}
  #         RELEASE_PATH: ${{ matrix.server.path }}/releases/${{ github.sha }}
  #         ACTIVE_RELEASE_PATH: ${{ matrix.server.path }}/current
  #         BASE_PATH: ${{ matrix.server.path }}
  #       with:
  #         host: ${{ matrix.server.ip }}
  #         username: ${{ matrix.server.username }}
  #         key: ${{ secrets.SSH_KEY }}
  #         port: ${{ matrix.server.port }}
  #         envs: GITHUB_SHA,RELEASE_PATH,ACTIVE_RELEASE_PATH,BASE_PATH
  #         script: |
  #           ${{ matrix.server.afterHooks }}

  clean-up:
    name: '${{ matrix.server.name }}: Clean up'
    runs-on: ubuntu-latest
    needs: [
        create-deployment-artifacts,
        prepare-release-on-servers,
        activate-release,
        # run-before-hooks,
        # run-after-hooks,
      ]
    strategy:
      matrix:
        server: ${{ fromJson(needs.create-deployment-artifacts.outputs.DEPLOYMENT_MATRIX) }}
    steps:
      - name: Run after hooks
        uses: appleboy/ssh-action@master
        env:
          RELEASES_PATH: ${{ matrix.server.path }}/releases
          ARTIFACTS_PATH: ${{ matrix.server.path }}/artifacts
        with:
          host: ${{ matrix.server.ip }}
          username: ${{ matrix.server.username }}
          key: ${{ secrets.SSH_KEY }}
          port: ${{ matrix.server.port }}
          envs: RELEASES_PATH,ARTIFACTS_PATH
          script: |
            cd $RELEASES_PATH && ls -t -1 | tail -n +6 | xargs rm -rf
            cd $ARTIFACTS_PATH && ls -t -1 | tail -n +3 | xargs rm -rf
